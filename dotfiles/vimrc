" NOTE that the below configs are for both vim and neovim

"Define map leader
let mapleader = ","
" Don't Throw Away the Reverse Character Search Command
" REFER Practical Vim Textbook
noremap \ ,

"split navigations
nnoremap <C-J> <C-W><C-J>
" TODO NOTE that the below mapping is interfering with LSP mapping
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

"open child block after matching braces
inoremap <leader>o <esc>i<C-j><esc>ko

"open a new line at the top of file entering insert mode
nnoremap <leader>to <esc>ggi<C-j><esc>ki

" Explode split to full size
nnoremap <leader>ee <C-w>_<CR><C-w>\|<CR>
" Escape from full  size
nnoremap <leader>E <C-w>=

" Navigate arglist
nnoremap ]a :next<CR>
nnoremap ]A :last<CR>
nnoremap [a :prev<CR>
nnoremap [A :first<CR>

"set relative 'hybrid' line numbers
:set nu

"map <Esc>
nnoremap fj <esc>
vnoremap fj <esc>
onoremap fj <esc>
cnoremap fj <esc>
inoremap fj <esc>

"Search and replace word under cursor
nnoremap <leader>s :%s/\v<<C-r><C-w>>/
"Alternatively, you could use this mapping so that the final /g is already
"entered:
":nnoremap <Leader>s :%s/\v<<C-r><C-w>>/g<Left><Left>

"search and replace visually highlighted text
vnoremap <C-r> "hy:%s/<C-r>h//gc<left><left><left>

" indent file
nnoremap <leader>ai gg=G<C-O>

" delete all trailing whitespace from each line, then replace three 
" or more consecutive line endings with two line endings (a single blank line)
nnoremap <leader>df :%s/\s\+$//e<cr> :%s/\n\{3,}/\r\r/e<cr>

" (REFER: Stackoverflow bookmarked: How to map CAPS LOCK key in VIM?)
" The first line maps escape to the caps lock key when you enter Vim, and the
" second line returns normal functionality to caps lock when you quit.
" This requires Linux with the xorg-xmodmap package installed.
"au VimEnter * !xmodmap -e 'clear Lock' -e 'keycode 0x42 = Control'
"au VimLeave * !xmodmap -e 'clear Lock' -e 'keycode 0x42 = Caps_Lock'

" (Refer Practical Vim Pg83)
" Traverse the buffer list using four commands— :bprev and :bnext to move
" backward and forward one at a time, and :bfirst and :blast to jump to the
" start or end of the list
nnoremap <silent> [b :bprevious<CR>
nnoremap <silent> ]b :bnext<CR>
nnoremap <silent> [B :bfirst<CR>
nnoremap <silent> ]B :blast<CR>
" TODO Similar mappings to navigate arglist


" (Refer Practical Vim Pg101 Link to Vimcasts episode)
" Easy expansion of active file directory
"`nnoremap <leader>ew :e <C-R>=expand('%:p:h').'/'<CR>`
" (Refer Practical Vim Pg101 Link to Vimcasts episode)
" Easy expansion of active file directory in horizontal split
"`nnoremap <leader>es :sp <C-R>=expand('%:p:h').'/'<CR>`
" Easy expansion of active file directory in vertical split
"`nnoremap <leader>ev :vsp <C-R>=expand('%:p:h').'/'<CR>`
" Easy expansion of active file directory in new tab
"`nnoremap <leader>et :tabe <C-R>=expand('%:p:h').'/'<CR>`
" TODO Delete the above commented out para after you have understood
" the concept of %, :p, and :h

" (Refer Practical Vim Pg101)
" Easy expansion of the shell directory(or, in some cases also called
" source directory).
" NOTE: this mapping can also done just like the mapping
" expansion of active file directory
" `cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'`
" TODO Undestand the difference between the above mapping and the one
" below.
" less horrible way of creating the same mappings:
cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<cr>
map <leader>ew :e %%
map <leader>es :sp %%
map <leader>ev :vsp %%
map <leader>et :tabe %%
" Additionally, this allows you to expand the directory of the current file
" anywhere at the command line by pressing %%

" Make a word SHOUT (uppercase) in insert mode 
inoremap <leader>ws <esc>gUawea

" Fold
nnoremap z{ zfa{ 
nnoremap z( zfa( 

" Copied from ALE docs on github, section ' How can I use ALE and coc.nvim
" together?'
let g:ale_disable_lsp = 1

let g:ale_fixers = {
 \ 'javascript': ['eslint']
 \ }

let g:ale_sign_error = '❌'
let g:ale_sign_warning = '⚠️'

let g:ale_fix_on_save = 1
